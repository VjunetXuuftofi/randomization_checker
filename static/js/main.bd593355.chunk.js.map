{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["chiSquaredTest","require","App","props","add_flip","flip","setState","sequence","state","concat","simulate_streaks","num_flips","length","expected_streak_counts","Array","Object","seal","fill","i","prev","Math","floor","random","streak_length","j","next","calculate_streaks","streak_counts","compare_streaks","p","enough","probability","streaks_p","streaks_p_found","transition_matrix","heads_to_tails","tails_to_heads","heads_to_heads","tails_to_tails","this_roll","transition_matrix_p","transition_matrix_p_found","check_flips","calculated","reset","undefined","Container","maxWidth","style","textAlign","Grid","container","item","xs","justify","marginLeft","Button","onClick","this","Table","TableBody","TableRow","TableCell","TableHead","toFixed","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","MuiTypography","variantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.bd593355.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport {Button, TableContainer} from \"@material-ui/core\";\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableBody from '@material-ui/core/TableBody';\nimport Container from '@material-ui/core/Container';\nimport { Grid } from '@material-ui/core';\nimport TableHead from \"@material-ui/core/TableHead\";\nvar chiSquaredTest = require(\"chi-squared-test\");\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sequence: [],\n      calculated: false\n    }\n  }\n  add_flip = (flip) => {\n    this.setState({\n      sequence: this.state.sequence.concat(flip)\n    });\n  }\n\n  simulate_streaks = () => {\n    const num_flips = this.state.sequence.length;\n    let expected_streak_counts = new Array(4);\n    if (Object.seal) {\n      expected_streak_counts.fill(0);\n      Object.seal(expected_streak_counts);\n    }\n    for (let i = 0; i < 10000; i++) {\n      let prev = Math.floor(Math.random() + 0.5);\n      let streak_length = 1;\n      for (let j = 1; j < num_flips; j++) {\n        let next = Math.floor(Math.random() + 0.5);\n        if (next === prev) {\n          streak_length += 1;\n        } else {\n          if (streak_length >= 4) {\n            expected_streak_counts[3] += 1 / 10000;\n          } else {\n            expected_streak_counts[streak_length-1] += 1 / 10000;\n          }\n          streak_length = 1;\n          prev = next;\n        }\n      }\n      if (streak_length >= 4) {\n        expected_streak_counts[3] += 1 / 10000;\n      } else {\n        expected_streak_counts[streak_length-1] += 1 / 10000;\n      }\n    }\n    return expected_streak_counts;\n  }\n  calculate_streaks = () => {\n    const num_flips = this.state.sequence.length;\n    let streak_counts = new Array(4);\n    if (Object.seal) {\n      streak_counts.fill(0);\n      Object.seal(streak_counts);\n    }\n\n    let prev = this.state.sequence[0];\n    let streak_length = 1;\n    for (let i = 1; i < num_flips; i++) {\n      let next = this.state.sequence[i];\n      if (next === prev) {\n        streak_length += 1;\n      } else {\n        if (streak_length >= 4) {\n          streak_counts[3] += 1;\n        } else {\n          streak_counts[streak_length-1] += 1;\n        }\n        streak_length = 1;\n        prev = next;\n      }\n    }\n    if (streak_length >= 4) {\n      streak_counts[3] += 1;\n    } else {\n      streak_counts[streak_length-1] += 1;\n    }\n    return streak_counts;\n  }\n\n  compare_streaks = () => {\n    let streak_counts = this.calculate_streaks();\n    let expected_streak_counts = this.simulate_streaks();\n    let enough = true;\n    for (let i = 0;i < expected_streak_counts.length; i++) {\n      if (expected_streak_counts[i] < 5) {\n        enough = false;\n        break;\n      }\n    }\n    let p;\n    if (enough) {\n      p = chiSquaredTest(streak_counts, expected_streak_counts, 1).probability;\n    }\n    this.setState({\n      streak_counts: streak_counts,\n      expected_streak_counts: expected_streak_counts,\n      streaks_p: p,\n      streaks_p_found: enough\n    })\n\n\n  }\n\n  transition_matrix = () => {\n    const num_flips = this.state.sequence.length;\n    let heads_to_tails = 0;\n    let tails_to_heads = 0;\n    let heads_to_heads = 0;\n    let tails_to_tails = 0;\n    let prev = this.state.sequence[0];\n    for (let i = 1; i < num_flips; i++) {\n      const this_roll = this.state.sequence[i];\n      if (prev === 0) {\n        if (this_roll === 0) {\n          heads_to_heads += 1;\n        }\n        else {\n          heads_to_tails += 1;\n        }\n      } else {\n        if (this_roll === 0) {\n          tails_to_heads += 1;\n        } else {\n          tails_to_tails += 1;\n        }\n      }\n      prev = this_roll;\n    }\n    let p;\n\n    if (num_flips >= 20) {\n      const expected = [num_flips/4, num_flips/4, num_flips/4, num_flips/4];\n      const actual = [heads_to_heads, heads_to_tails, tails_to_heads, tails_to_tails];\n      p = chiSquaredTest(actual, expected, 1).probability;\n    }\n\n\n    this.setState({\n      heads_to_heads: heads_to_heads,\n      heads_to_tails: heads_to_tails,\n      tails_to_heads: tails_to_heads,\n      tails_to_tails: tails_to_tails,\n      transition_matrix_p: p,\n      transition_matrix_p_found: num_flips >= 20\n    });\n  }\n\n\n  check_flips = () => {\n    this.transition_matrix();\n    this.compare_streaks();\n    this.setState({\n      calculated: true\n    });\n  }\n\n  reset = () => {\n    this.setState({\n      sequence: [],\n      heads_to_heads: undefined,\n      heads_to_tails: undefined,\n      tails_to_heads: undefined,\n      tails_to_tails: undefined,\n      transition_matrix_p: undefined,\n      calculated: false\n    });\n  }\n\n  render() {\n    return (\n        <Container maxWidth={\"sm\"}>\n          <h3 style={{textAlign: \"center\"}}>How random are you really?</h3>\n          <p style={{textAlign: \"center\"}}>Pretend to flip some coins.</p>\n          <Grid container item xs={4} justify=\"center\" style={{marginLeft: \"33%\"}}>\n            <Button onClick={() => this.add_flip(0)}>Heads</Button><Button onClick={() => this.add_flip(1)}>Tails</Button><Button onClick={this.check_flips}>Check</Button><Button onClick={this.reset}>Reset</Button>\n            <span>Number of flips: {this.state.sequence.length}</span>\n            <i>Try to get 100</i>\n          </Grid>\n          {this.state.calculated ?\n              <div>\n                <h3 style={{textAlign: \"center\"}}>Transition Matrix</h3>\n                <Table>\n                  <TableBody>\n                    <TableRow>\n                      <TableCell> </TableCell><TableCell>Heads</TableCell><TableCell>Tails</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Heads</TableCell><TableCell>{this.state.heads_to_heads}</TableCell><TableCell>{this.state.heads_to_tails}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Tails</TableCell><TableCell>{this.state.tails_to_heads}</TableCell><TableCell>{this.state.tails_to_tails}</TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n                <br/>\n                {this.state.transition_matrix_p_found ?\n                  <span>Chi-squared GOF p-value: {this.state.transition_matrix_p}{this.state.transition_matrix_p > 0.05 ? \"✅\" : \"❌\"}\n                  <br/>\n                    {this.state.transition_matrix_p > 0.05 ? \"You seem pretty random!\": \"You aren't very random. Sad.\"}\n                  </span> :\n                    <span>Not enough flips to run a Chi-squared test.</span>\n                }\n                <h3 style={{textAlign: \"center\"}}>Streaks Analysis</h3>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Streak Length</TableCell>\n                      <TableCell>1</TableCell>\n                      <TableCell>2</TableCell>\n                      <TableCell>3</TableCell>\n                      <TableCell>4+</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    <TableRow>\n                      <TableCell>Observed</TableCell>\n                      <TableCell>{this.state.streak_counts[0]}</TableCell>\n                      <TableCell>{this.state.streak_counts[1]}</TableCell>\n                      <TableCell>{this.state.streak_counts[2]}</TableCell>\n                      <TableCell>{this.state.streak_counts[3]}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Expected</TableCell>\n                      <TableCell>{this.state.expected_streak_counts[0].toFixed(2)}</TableCell>\n                      <TableCell>{this.state.expected_streak_counts[1].toFixed(2)}</TableCell>\n                      <TableCell>{this.state.expected_streak_counts[2].toFixed(2)}</TableCell>\n                      <TableCell>{this.state.expected_streak_counts[3].toFixed(2)}</TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n                {this.state.streaks_p_found ?\n                    <span>Chi-squared GOF p-value: {this.state.streaks_p}{this.state.streaks_p> 0.05 ? \"✅\" : \"❌\"}\n                      <br/>\n                      {this.state.streaks_p > 0.05 ? \"You seem pretty random!\": \"You aren't very random. Sad.\"}\n                  </span> :\n                    <span>Not enough flips to run a Chi-squared test.</span>\n                }\n\n              </div> :\n              null\n          }\n        </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    props: {\n        MuiTypography: {\n            variantMapping: {\n                h1: 'h2',\n                h2: 'h2',\n                h3: 'h2',\n                h4: 'h2',\n                h5: 'h2',\n                h6: 'h2',\n                subtitle1: 'h2',\n                subtitle2: 'h2',\n                body1: 'span',\n                body2: 'span',\n            },\n        },\n    },\n});\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}